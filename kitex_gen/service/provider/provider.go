// Code generated by Kitex v0.7.2. DO NOT EDIT.

package provider

import (
	service "RpcProvider/kitex_gen/service"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return providerServiceInfo
}

var providerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Provider"
	handlerType := (*service.Provider)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register": kitex.NewMethodInfo(registerHandler, newProviderRegisterArgs, newProviderRegisterResult, false),
		"Login":    kitex.NewMethodInfo(loginHandler, newProviderLoginArgs, newProviderLoginResult, false),
		"Search":   kitex.NewMethodInfo(searchHandler, newProviderSearchArgs, newProviderSearchResult, false),
		"Upload":   kitex.NewMethodInfo(uploadHandler, newProviderUploadArgs, newProviderUploadResult, false),
		"Download": kitex.NewMethodInfo(downloadHandler, newProviderDownloadArgs, newProviderDownloadResult, false),
		"Delete":   kitex.NewMethodInfo(deleteHandler, newProviderDeleteArgs, newProviderDeleteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "service",
		"ServiceFilePath": `service.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.ProviderRegisterArgs)
	realResult := result.(*service.ProviderRegisterResult)
	success, err := handler.(service.Provider).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProviderRegisterArgs() interface{} {
	return service.NewProviderRegisterArgs()
}

func newProviderRegisterResult() interface{} {
	return service.NewProviderRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.ProviderLoginArgs)
	realResult := result.(*service.ProviderLoginResult)
	success, err := handler.(service.Provider).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProviderLoginArgs() interface{} {
	return service.NewProviderLoginArgs()
}

func newProviderLoginResult() interface{} {
	return service.NewProviderLoginResult()
}

func searchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.ProviderSearchArgs)
	realResult := result.(*service.ProviderSearchResult)
	success, err := handler.(service.Provider).Search(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProviderSearchArgs() interface{} {
	return service.NewProviderSearchArgs()
}

func newProviderSearchResult() interface{} {
	return service.NewProviderSearchResult()
}

func uploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.ProviderUploadArgs)
	realResult := result.(*service.ProviderUploadResult)
	success, err := handler.(service.Provider).Upload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProviderUploadArgs() interface{} {
	return service.NewProviderUploadArgs()
}

func newProviderUploadResult() interface{} {
	return service.NewProviderUploadResult()
}

func downloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.ProviderDownloadArgs)
	realResult := result.(*service.ProviderDownloadResult)
	success, err := handler.(service.Provider).Download(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProviderDownloadArgs() interface{} {
	return service.NewProviderDownloadArgs()
}

func newProviderDownloadResult() interface{} {
	return service.NewProviderDownloadResult()
}

func deleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.ProviderDeleteArgs)
	realResult := result.(*service.ProviderDeleteResult)
	success, err := handler.(service.Provider).Delete(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProviderDeleteArgs() interface{} {
	return service.NewProviderDeleteArgs()
}

func newProviderDeleteResult() interface{} {
	return service.NewProviderDeleteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *service.RegisterRequest) (r *service.RegisterResponse, err error) {
	var _args service.ProviderRegisterArgs
	_args.Req = req
	var _result service.ProviderRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *service.LoginRequest) (r *service.LoginResponse, err error) {
	var _args service.ProviderLoginArgs
	_args.Req = req
	var _result service.ProviderLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Search(ctx context.Context, req *service.SearchRequest) (r *service.SearchResponse, err error) {
	var _args service.ProviderSearchArgs
	_args.Req = req
	var _result service.ProviderSearchResult
	if err = p.c.Call(ctx, "Search", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Upload(ctx context.Context, req *service.UploadResquest) (r *service.UploadResponse, err error) {
	var _args service.ProviderUploadArgs
	_args.Req = req
	var _result service.ProviderUploadResult
	if err = p.c.Call(ctx, "Upload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Download(ctx context.Context, req *service.DownloadResquest) (r *service.DownloadResponse, err error) {
	var _args service.ProviderDownloadArgs
	_args.Req = req
	var _result service.ProviderDownloadResult
	if err = p.c.Call(ctx, "Download", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Delete(ctx context.Context, req *service.DeleteResquest) (r *service.DeleteResponse, err error) {
	var _args service.ProviderDeleteArgs
	_args.Req = req
	var _result service.ProviderDeleteResult
	if err = p.c.Call(ctx, "Delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
