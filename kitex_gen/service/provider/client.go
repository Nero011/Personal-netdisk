// Code generated by Kitex v0.7.2. DO NOT EDIT.

package provider

import (
	service "RpcProvider/kitex_gen/service"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, req *service.RegisterRequest, callOptions ...callopt.Option) (r *service.RegisterResponse, err error)
	Login(ctx context.Context, req *service.LoginRequest, callOptions ...callopt.Option) (r *service.LoginResponse, err error)
	Search(ctx context.Context, req *service.SearchRequest, callOptions ...callopt.Option) (r *service.SearchResponse, err error)
	Upload(ctx context.Context, req *service.UploadResquest, callOptions ...callopt.Option) (r *service.UploadResponse, err error)
	Download(ctx context.Context, req *service.DownloadResquest, callOptions ...callopt.Option) (r *service.DownloadResponse, err error)
	Deletee(ctx context.Context, req *service.DeleteResquest, callOptions ...callopt.Option) (r *service.DeleteResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kProviderClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kProviderClient struct {
	*kClient
}

func (p *kProviderClient) Register(ctx context.Context, req *service.RegisterRequest, callOptions ...callopt.Option) (r *service.RegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, req)
}

func (p *kProviderClient) Login(ctx context.Context, req *service.LoginRequest, callOptions ...callopt.Option) (r *service.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kProviderClient) Search(ctx context.Context, req *service.SearchRequest, callOptions ...callopt.Option) (r *service.SearchResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Search(ctx, req)
}

func (p *kProviderClient) Upload(ctx context.Context, req *service.UploadResquest, callOptions ...callopt.Option) (r *service.UploadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Upload(ctx, req)
}

func (p *kProviderClient) Download(ctx context.Context, req *service.DownloadResquest, callOptions ...callopt.Option) (r *service.DownloadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Download(ctx, req)
}

func (p *kProviderClient) Deletee(ctx context.Context, req *service.DeleteResquest, callOptions ...callopt.Option) (r *service.DeleteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Deletee(ctx, req)
}
